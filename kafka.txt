https://github.com/confluentinc/cp-docker-images/blob/5.3.3-post/examples/kafka-cluster/docker-compose.yml
docker-compose up -d
docker exec -it kafka_kafka-1_1 bash
kafka-topics --create --bootstrap-server localhost:29092 --replication-factor 3 --partitions 3 --topic meutopico
kafka-topics
kafka-topics --list --bootstrap-server localhost:29092
kafka-console-producer --broker-list localhost:29092 --topic meutopico
kafka-console-consumer --bootstrap-server localhost:29092 --topic meutopico (em outro terminal)
kafka-console-consumer --bootstrap-server localhost:29092 --topic meutopico --from-beginning

//Mensagens distribuidas 
kafka-console-consumer --bootstrap-server localhost:29092 --topic meutopico --from-beginning --group a (em outro terminal) (Lê uma partição)
kafka-console-consumer --bootstrap-server localhost:29092 --topic meutopico --from-beginning --group a (em outro terminal) (Lê uma partição)
kafka-console-consumer --bootstrap-server localhost:29092 --topic meutopico --from-beginning --group a (em outro terminal) (Lê uma partição)


kafka-topics --describe --bootstrap-server localhost:29092 --topic meutopico
Topic: meutopico        TopicId: 5uphDxLQTN6ZYDUc3QCQ9w    PartitionCount: 3       ReplicationFactor: 3       Configs:
        Topic: meutopico        Partition: 0       Leader: 2       Replicas: 2,1,3 Isr: 2,1,3
        Topic: meutopico        Partition: 1       Leader: 3       Replicas: 3,2,1 Isr: 3,2,1
        Topic: meutopico        Partition: 2       Leader: 1       Replicas: 1,3,2 Isr: 1,3,2

kafka-consumer-groups --group a --bootstrap-server localhost:29092 --describe
GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                           HOST            CLIENT-ID
a               meutopico       1          7               7               0               console-consumer-88eb65f9-1bf2-4b4d-8963-da0a5cbea83a /127.0.0.1      console-consumer
a               meutopico       2          5               5               0               console-consumer-bd12845c-36a4-435c-90c1-ce6ebc2654b9 /127.0.0.1      console-consumer
a               meutopico       0          8               8               0               console-consumer-78f3a892-2385-4fd3-9e93-92e17a3ca71c /127.0.0.1      console-consumer

Apache kafka

O que é o Apache Kafka?

"O Apache Kafka é uma plataforma distribuída de streaming de eventos open-source que é
utilizada por milhares de empresas para uma alta perfomance em pipeline de dados, stream 
de analytics, integração de dados e aplicações de missão crítica"

https://kafka.apache.org

O mundo dos eventos

Cada dia mais precisamos processar mais e mais eventos em diversos tipos de plataforma. Desde sistemas que precisam se comunicam, devices para IOT, monitoramento de aplicações, sistemas de alarmes, etc.

Perguntas:
    - Onde salvar esses eventos?
    - Como recuperar de uma forma rápida e simples o feedback entre um processo e outro ou mesmo entre um sistema e outro com fluidez e em tempo real?
    - Como escalar?
    - Como ter resiliência e alta disponibilidade?

Kafka e seus super poderes
    - Altíssimo throughput ( Entrada e saída de dados )
    - Latência extremamente baixa ( 2ms )
    - Escalável
    - Armazenamento 
    - Alta disponibilidade
    - Se conecta com quase tudo
    - Bibliotecas prontas para as mais diversas tecnologias
    - Ferramentas open-source

Conceitos e dinâmica de funcionamento

Producer -> Kafka -> Broker A, Broker B, Broker C <- consumer

Tópicos

Tópico é o canal de comunicação responsável por receber e disponibilizar os dados enviados para o Kafka

Producer -> Tópico -> Kafka -> Tópico -> Consumer

Partição do Tópico Vendas

                Producer

 |   |   |   |   |   |   |   |   |   |   |
 V   v   v   v   v   v   v   v   v   v   v

[0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [N] - offsets
 
 |   |   |   |   |   |   |   |   |   |   |
 v   v   v   v   v   v   v   v   v   v   v
            App             App     
             A               B
            
                Consumer
        
Anatomia de um registro

    Offset 0

---------------
    headers
--------------
     key
--------------
     value
--------------
   timestamp
--------------


Partições

Cada tópico pode ter uma ou mais partições para conseguir garantir a distribuição e resiliência de seus dados

Tópico -> Partição 1    
       -> Partição 2
       -> Partição 3

Sobre as Keys

Se a transferência e o estorno estiverem em partições diferentes e os sistemas que os consomem não possuirem a mesma velocidade, 
o estorno pode ser solicitado antes que a transferência seja registrada
Para isso não ocorrer, a transferência e o estorno devem estar em uma mesma partição
Para isso ocorrer, os dois devem possuir a mesma chave

Transferência (0) -> key=Movimentação
Estorno (1) -> key=Movimentação

a, b ->Partição 1 -> [0][1] <---- Consumer 1 (lento) 

c -> Partição 2 -> [0] <---- Consumer 2 (rápido)

d -> Partição 3 -> [0] <---- Consumer 3

Partições distribuídas

Tópico: Vendas -> Broker A (Máquina A) [Partição 1]
               -> Broker B (Máquina B) [Partição 2]
               -> Broker C (Máquina C) [Partição 3]


Replication Factor = 2 (Garante que a aplicação nunca ficará fora do ar, pois se um broker cair, as partições dele continuarão no ar em outros brokers)
|
v
Tópico: Vendas -> Broker A [Partição 1, Partição 3]
               -> Broker B [Partição 2, Partição 1]
               -> Broker C [Partição 3, Partição 2]

Consumer

                Tópico    
            - Partição 0 - ->
Producer -> - Partição 1 - ->  Consumer
            - Partição 2 - ->

Consumer Groups

               Tópico               Grupo X
            - Partição 0 - ->   - Consumer A -
Producer -> - Partição 1 - ->   - Consumer A -
            - Partição 2 - ->   - Consumer B -

               Tópico               Grupo X
            - Partição 0 - ->   - Consumer A -
Producer -> - Partição 1 - ->   - Consumer B -
            - Partição 2 - ->   - Consumer C -

               Tópico               Grupo X
            - Partição 0 - ->   - Consumer A -
Producer -> - Partição 1 - ->   - Consumer B -
            - Partição 2 - ->   - Consumer C -
                                - Consumer D - 
